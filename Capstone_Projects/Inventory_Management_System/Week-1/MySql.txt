-- Create Database
CREATE DATABASE inventory_db;
USE inventory_db;

-- Products Table
CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    category VARCHAR(50),
    reorder_level INT DEFAULT 10
);

-- Warehouses Table
CREATE TABLE warehouses (
    warehouse_id INT AUTO_INCREMENT PRIMARY KEY,
    warehouse_name VARCHAR(100) NOT NULL,
    location VARCHAR(100)
);

-- Suppliers Table
CREATE TABLE suppliers (
    supplier_id INT AUTO_INCREMENT PRIMARY KEY,
    supplier_name VARCHAR(100) NOT NULL,
    contact_info VARCHAR(100)
);

-- Stock Movements Table
CREATE TABLE stock_movements (
    movement_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT,
    warehouse_id INT,
    movement_type ENUM('IN','OUT') NOT NULL,
    quantity INT NOT NULL,
    movement_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)
);

-- Insert Products
INSERT INTO products (product_name, category, reorder_level)
VALUES ('Laptop', 'Electronics', 5),
       ('Chair', 'Furniture', 15),
       ('Keyboard', 'Electronics', 10);

-- Insert Warehouses
INSERT INTO warehouses (warehouse_name, location)
VALUES ('Central Warehouse', 'Chennai'),
       ('Branch Warehouse', 'Bangalore');

-- Insert Supplier
INSERT INTO suppliers (supplier_name, contact_info)
VALUES ('ABC Traders', 'abc@gmail.com'),
       ('XYZ Supplies', 'xyz@gmail.com');

-- Insert Stock Movements
INSERT INTO stock_movements (product_id, warehouse_id, movement_type, quantity)
VALUES (1, 1, 'IN', 50),
       (2, 1, 'IN', 30),
       (3, 2, 'IN', 20),
       (1, 1, 'OUT', 10);

-- Stored product below record level 
DELIMITER //
CREATE PROCEDURE check_low_stock()
BEGIN
    SELECT p.product_id, p.product_name,
           SUM(CASE WHEN sm.movement_type = 'IN' THEN sm.quantity 
                    WHEN sm.movement_type = 'OUT' THEN -sm.quantity ELSE 0 END) AS current_stock,
           p.reorder_level
    FROM products p
    LEFT JOIN stock_movements sm ON p.product_id = sm.product_id
    GROUP BY p.product_id, p.product_name, p.reorder_level
    HAVING current_stock < p.reorder_level;
END //
DELIMITER ;

CALL check_low_stock();
